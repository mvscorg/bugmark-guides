{
    "docs": [
        {
            "location": "/", 
            "text": "BugMark\n\n\nAbout\n\n\nBlockchain Marketplace for Software Vulnerabilities and Issues\n\n\nCode and Documentation Repositories\n\n\nWe have three repos at the moment:\n\n\n\n\nEnd-User documentation: [docs][docs]\n\n\nOracles and Web2 Management app: [web2][web2]\n\n\nSolidity contracts and Dapp(s): [web3][web3]\n\n\n\n\nStatus of the project and these docs\n\n\nThese docs reflect the pre-implementation V0 version of the project.  Rest assured we will return to these to refresh them once we reach our next milestone.\n\n\nSlide decks, presentations, demos, etc.\n\n\nWe have a slide deck that provides a slightly longer intro: \nBugMark Intro Slides\n \n\n\nInspiration\n\n\nDon Marti wrote a pretty \ngood summary\n of some of the ideas we are looking to explore, here.\n\n\nAbout this Documentation\n\n\nThese documents are written in \nmarkdown\n.  The source is \nonline\n. \n\n\nWe (usually) use \nBalsamiq\n for wireframing, \ndraw.io\n for diagrams. HTML is generated by \nmkdocs\n.  \n\n\nView the generated documentation via \nHTTP\n or \nIPFS\n.", 
            "title": "Welcome"
        }, 
        {
            "location": "/#bugmark", 
            "text": "", 
            "title": "BugMark"
        }, 
        {
            "location": "/#about", 
            "text": "Blockchain Marketplace for Software Vulnerabilities and Issues", 
            "title": "About"
        }, 
        {
            "location": "/#code-and-documentation-repositories", 
            "text": "We have three repos at the moment:   End-User documentation: [docs][docs]  Oracles and Web2 Management app: [web2][web2]  Solidity contracts and Dapp(s): [web3][web3]", 
            "title": "Code and Documentation Repositories"
        }, 
        {
            "location": "/#status-of-the-project-and-these-docs", 
            "text": "These docs reflect the pre-implementation V0 version of the project.  Rest assured we will return to these to refresh them once we reach our next milestone.", 
            "title": "Status of the project and these docs"
        }, 
        {
            "location": "/#slide-decks-presentations-demos-etc", 
            "text": "We have a slide deck that provides a slightly longer intro:  BugMark Intro Slides", 
            "title": "Slide decks, presentations, demos, etc."
        }, 
        {
            "location": "/#inspiration", 
            "text": "Don Marti wrote a pretty  good summary  of some of the ideas we are looking to explore, here.", 
            "title": "Inspiration"
        }, 
        {
            "location": "/#about-this-documentation", 
            "text": "These documents are written in  markdown .  The source is  online .   We (usually) use  Balsamiq  for wireframing,  draw.io  for diagrams. HTML is generated by  mkdocs .    View the generated documentation via  HTTP  or  IPFS .", 
            "title": "About this Documentation"
        }, 
        {
            "location": "/about/", 
            "text": "About BugMark\n\n\nBugMark is a Blockchain Marketplace for Software Vulnerabilities and Issues\n\n\nFind us online at \nhttps://bugmark.net\n.\n\n\nA Futures Market\n\n\nBugMark is a \nfutures market\n\nthat trades two types of contracts:\n\n\n\n\n\n\n\n\nContract Type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nForecast Contract\n\n\nTBD\n\n\n\n\n\n\nReward Contract\n\n\nTBD\n\n\n\n\n\n\n\n\nContracts are resolved against two types of data:\n\n\n\n\n\n\n\n\nBug Type\n\n\nData Source\n\n\n\n\n\n\n\n\n\n\nSoftware Vulnerability\n\n\nCVE (Mitre\n\n\n\n\n\n\nSoftware Issue\n\n\nGitHub, Bugzilla, etc", 
            "title": "About BugMark"
        }, 
        {
            "location": "/about/#about-bugmark", 
            "text": "BugMark is a Blockchain Marketplace for Software Vulnerabilities and Issues  Find us online at  https://bugmark.net .", 
            "title": "About BugMark"
        }, 
        {
            "location": "/about/#a-futures-market", 
            "text": "BugMark is a  futures market \nthat trades two types of contracts:     Contract Type  Description      Forecast Contract  TBD    Reward Contract  TBD     Contracts are resolved against two types of data:     Bug Type  Data Source      Software Vulnerability  CVE (Mitre    Software Issue  GitHub, Bugzilla, etc", 
            "title": "A Futures Market"
        }, 
        {
            "location": "/design/overview/", 
            "text": "Design Overview\n\n\nThe design of this market should be straighforward to developers of decentralized applications (Dapps).\n\n\nThere are three inputs to the market:\n\n\n1) We are building a marketplace Dapp around software issues.  Those issues are found in repositories. \n\n\nSo we need some way to grab issues from repos and bring them into the marketplace.  That thing is called an \"oracle\", and it needs to be configured by someone we're calling a Product Manager to grab details about issues, present them to the marketplace, and periodically update the status of those issues.  \n\n\n2) Users provide input to the market by making predictions and providing rewards.  This is 100% through the Dapp, and that info never reaches another system.  Users can put currency into escrow using the Dapp to incentivize others to participate by taking the other side of their contract and fixing issues or predicting new issues.\n\n\n3) Researchers can implement algorithms (for Scoring and Payout at first) using solidity (requires contract upgrade) or our DSLs (we have to write them first) directly in the Dapp.  Their results should ultimately be viewable through a dashboard.\n\n\nThere are other possibilities for this - Arbitrage, etc.  But lets start with those inputs first.\n\n\nHigh Level Processes Interaction Diagram\n\n\nSo, to summarize all the players in this process:\n\n\nUsers\n interact with the marketplace Dapp through any web3 browser (i.e. firefox or chrome with metamask installed, status.im, etc.).  This is how they access the web3 apps to make predictions and interact with the other market players.\n\n\nThe \nOracle\n is effectively a configurable cron job that interacts with issue trackers and with the marketplace Dapp - it periodically feeds data on changes in issues to the market.\n\n\nThe \nDapp\n has a web interface that loads data from the ethereum blockchain.  The \nDapp\n contains at least two smart contracts (the market and the default reward algo)..\n\n\nThe \nMarket\n smart contract interacts with users through the web3 UI, and checks the blockchain for data on the currrent status of predictions and bugs when the page is loaded by a user.\n\n\nThe \nReward Algorithm\n smart contract is fed data about current bug statuses, and calculates payouts for users of the system.  We will probably use solidity events to drive this, but it could be done with the Oracle in some designs.\n\n\nFuture stuff not shown: Scoring Algos, Bots.", 
            "title": "Overview"
        }, 
        {
            "location": "/design/overview/#design-overview", 
            "text": "The design of this market should be straighforward to developers of decentralized applications (Dapps).  There are three inputs to the market:  1) We are building a marketplace Dapp around software issues.  Those issues are found in repositories.   So we need some way to grab issues from repos and bring them into the marketplace.  That thing is called an \"oracle\", and it needs to be configured by someone we're calling a Product Manager to grab details about issues, present them to the marketplace, and periodically update the status of those issues.    2) Users provide input to the market by making predictions and providing rewards.  This is 100% through the Dapp, and that info never reaches another system.  Users can put currency into escrow using the Dapp to incentivize others to participate by taking the other side of their contract and fixing issues or predicting new issues.  3) Researchers can implement algorithms (for Scoring and Payout at first) using solidity (requires contract upgrade) or our DSLs (we have to write them first) directly in the Dapp.  Their results should ultimately be viewable through a dashboard.  There are other possibilities for this - Arbitrage, etc.  But lets start with those inputs first.", 
            "title": "Design Overview"
        }, 
        {
            "location": "/design/overview/#high-level-processes-interaction-diagram", 
            "text": "So, to summarize all the players in this process:  Users  interact with the marketplace Dapp through any web3 browser (i.e. firefox or chrome with metamask installed, status.im, etc.).  This is how they access the web3 apps to make predictions and interact with the other market players.  The  Oracle  is effectively a configurable cron job that interacts with issue trackers and with the marketplace Dapp - it periodically feeds data on changes in issues to the market.  The  Dapp  has a web interface that loads data from the ethereum blockchain.  The  Dapp  contains at least two smart contracts (the market and the default reward algo)..  The  Market  smart contract interacts with users through the web3 UI, and checks the blockchain for data on the currrent status of predictions and bugs when the page is loaded by a user.  The  Reward Algorithm  smart contract is fed data about current bug statuses, and calculates payouts for users of the system.  We will probably use solidity events to drive this, but it could be done with the Oracle in some designs.  Future stuff not shown: Scoring Algos, Bots.", 
            "title": "High Level Processes Interaction Diagram"
        }, 
        {
            "location": "/design/elements/", 
            "text": "Elements\n\n\nContracts\n\n\nBugMark trades \nReward Contacts\n and a \nForecast Contracts\n.\n\n\nForecast Contract\n\n\n\"I will pay $X if an Issue matching ${METADATA} exists before $DATE\"\n\n\n\n\nReward Contact\n\n\n\"I will pay $X if Issue $Y is resolved before $Date\"\n\n\n\n\nContract Attributes\n\n\n\n\n\n\n\n\nATTRIBUTE\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nPremium\n\n\nAdjustable risk premium\n\n\n\n\n\n\nMetadata\n\n\nLabels and Fields used for issue matching\n\n\n\n\n\n\nPayout Algorithm\n\n\nDSL for pluggable payout algorithm\n\n\n\n\n\n\n\n\nRepos\n\n\nTypes\n\n\nRepo Types\n are hard coded into the system.\n\n\n\n\n\n\n\n\nREPO TYPE\n\n\nSUPPORTED CONTRACT TYPES\n\n\n\n\n\n\n\n\n\n\nGitHub\n\n\nREWARD, FORECAST\n\n\n\n\n\n\nBugZilla\n\n\nREWARD, FORECAST\n\n\n\n\n\n\nCVE\n\n\nFORECAST\n\n\n\n\n\n\n\n\nCharacteristics\n\n\n\n\nSome repos are hard-coded in the system (eg BugZilla/Firefox,\n  BugZilla/Thunderbird, CVE)\n\n\nSome repos are added dynamically by users (eg GitHub/Repo1, GitHub/Repo2, ...)\n\n\n\n\nIssues\n\n\nIssue Metadata\n\n\nNote: For each issue we can programatically extract:\n\n\n\n\nthe issue status (Open, Closed)\n\n\nthe issue metadata\n\n\n\n\n\n\n\n\n\n\nREPO TYPE\n\n\nISSUE META-DATA\n\n\n\n\n\n\n\n\n\n\nCVE\n\n\n[hardcoded] severity, type, etc. etc.\n\n\n\n\n\n\nBugZilla\n\n\n[hardcoded] severity, etc.\n\n\n\n\n\n\nGitHub\n\n\n[dynamic] labels\n\n\n\n\n\n\n\n\nSync\n\n\nWe pull issues from each repo periodicaly (once an hour?) and resolve in the\noracle.\n\n\nMatch Params\n\n\n\n\nCVE\n - match against hardcoded metadata fields\n\n\nBUGZILLA\n - match against hardcoded metadata fields\n\n\nGitHub\n - match against dynamic labels", 
            "title": "Elements"
        }, 
        {
            "location": "/design/elements/#elements", 
            "text": "", 
            "title": "Elements"
        }, 
        {
            "location": "/design/elements/#contracts", 
            "text": "BugMark trades  Reward Contacts  and a  Forecast Contracts .", 
            "title": "Contracts"
        }, 
        {
            "location": "/design/elements/#forecast-contract", 
            "text": "\"I will pay $X if an Issue matching ${METADATA} exists before $DATE\"", 
            "title": "Forecast Contract"
        }, 
        {
            "location": "/design/elements/#reward-contact", 
            "text": "\"I will pay $X if Issue $Y is resolved before $Date\"", 
            "title": "Reward Contact"
        }, 
        {
            "location": "/design/elements/#contract-attributes", 
            "text": "ATTRIBUTE  DESCRIPTION      Premium  Adjustable risk premium    Metadata  Labels and Fields used for issue matching    Payout Algorithm  DSL for pluggable payout algorithm", 
            "title": "Contract Attributes"
        }, 
        {
            "location": "/design/elements/#repos", 
            "text": "", 
            "title": "Repos"
        }, 
        {
            "location": "/design/elements/#types", 
            "text": "Repo Types  are hard coded into the system.     REPO TYPE  SUPPORTED CONTRACT TYPES      GitHub  REWARD, FORECAST    BugZilla  REWARD, FORECAST    CVE  FORECAST", 
            "title": "Types"
        }, 
        {
            "location": "/design/elements/#characteristics", 
            "text": "Some repos are hard-coded in the system (eg BugZilla/Firefox,\n  BugZilla/Thunderbird, CVE)  Some repos are added dynamically by users (eg GitHub/Repo1, GitHub/Repo2, ...)", 
            "title": "Characteristics"
        }, 
        {
            "location": "/design/elements/#issues", 
            "text": "", 
            "title": "Issues"
        }, 
        {
            "location": "/design/elements/#issue-metadata", 
            "text": "Note: For each issue we can programatically extract:   the issue status (Open, Closed)  the issue metadata      REPO TYPE  ISSUE META-DATA      CVE  [hardcoded] severity, type, etc. etc.    BugZilla  [hardcoded] severity, etc.    GitHub  [dynamic] labels", 
            "title": "Issue Metadata"
        }, 
        {
            "location": "/design/elements/#sync", 
            "text": "We pull issues from each repo periodicaly (once an hour?) and resolve in the\noracle.", 
            "title": "Sync"
        }, 
        {
            "location": "/design/elements/#match-params", 
            "text": "CVE  - match against hardcoded metadata fields  BUGZILLA  - match against hardcoded metadata fields  GitHub  - match against dynamic labels", 
            "title": "Match Params"
        }, 
        {
            "location": "/design/actors/", 
            "text": "Actors\n\n\n\n\n\n\n\n\nActor\n\n\nOrg\n\n\nOverview\n\n\n\n\n\n\n\n\n\n\nProduct Owner\n\n\nOwner\n\n\nAssembles and Watches Metrics\n\n\n\n\n\n\nProduct Manager\n\n\nAny\n\n\nManages Payout Algorithms\n\n\n\n\n\n\nDeveloper\n\n\nAny\n\n\nWatches Market, Fixes Bugs\n\n\n\n\n\n\nPublisher\n\n\nAny\n\n\nConfigures/Publishes a new contract\n\n\n\n\n\n\nCounterparty\n\n\nAny\n\n\nTakes a contract\n\n\n\n\n\n\n\n\nContract Participants\n\n\n\n\nMarket Participants", 
            "title": "Actors"
        }, 
        {
            "location": "/design/actors/#actors", 
            "text": "Actor  Org  Overview      Product Owner  Owner  Assembles and Watches Metrics    Product Manager  Any  Manages Payout Algorithms    Developer  Any  Watches Market, Fixes Bugs    Publisher  Any  Configures/Publishes a new contract    Counterparty  Any  Takes a contract", 
            "title": "Actors"
        }, 
        {
            "location": "/design/actors/#contract-participants", 
            "text": "", 
            "title": "Contract Participants"
        }, 
        {
            "location": "/design/actors/#market-participants", 
            "text": "", 
            "title": "Market Participants"
        }, 
        {
            "location": "/tbd/incentive/", 
            "text": "Incentives DSL\n\n\nWe intend to have a configurable DSL for Incentives.\n\n\nPossible configurable parameters for this DSL include:\n\n\n\n\npayout period\n - Net0, Net30...", 
            "title": "Incentives DSL"
        }, 
        {
            "location": "/tbd/incentive/#incentives-dsl", 
            "text": "We intend to have a configurable DSL for Incentives.  Possible configurable parameters for this DSL include:   payout period  - Net0, Net30...", 
            "title": "Incentives DSL"
        }, 
        {
            "location": "/tbd/implementation/", 
            "text": "Implementation Scope\n\n\nThe design will accomodate all features. We plan to implement Version 0\nfeatures in this project, and Version N features in follow-on efforts.\n\n\n\n\n\n\n\n\nArea\n\n\nVersion 0\n\n\nVersion N\n\n\n\n\n\n\n\n\n\n\nRepo Types\n\n\nGitHub Issues\n\n\nBugZilla, CVE\n\n\n\n\n\n\nContract Parties\n1\n\n\nOne-to-One Contracts\n\n\nMulti-Party Contracts\n\n\n\n\n\n\nPayout Algorithm\n\n\nOne hard-coded algorithm\n\n\nPluggable algorithm, Configuration UI\n\n\n\n\n\n\nMetrics\n\n\nShow Current Status\n\n\nExport Data to Health Dash, TimeSeriesDB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote that there can be multiple contracts against a single issue, all\nrunning in parallel.", 
            "title": "Implementation"
        }, 
        {
            "location": "/tbd/implementation/#implementation-scope", 
            "text": "The design will accomodate all features. We plan to implement Version 0\nfeatures in this project, and Version N features in follow-on efforts.     Area  Version 0  Version N      Repo Types  GitHub Issues  BugZilla, CVE    Contract Parties 1  One-to-One Contracts  Multi-Party Contracts    Payout Algorithm  One hard-coded algorithm  Pluggable algorithm, Configuration UI    Metrics  Show Current Status  Export Data to Health Dash, TimeSeriesDB         Note that there can be multiple contracts against a single issue, all\nrunning in parallel.", 
            "title": "Implementation Scope"
        }
    ]
}